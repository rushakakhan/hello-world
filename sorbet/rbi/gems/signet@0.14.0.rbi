# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `signet` gem.
# Please instead update this file by running `tapioca generate`.

# typed: true

module Signet
  class << self
    def parse_auth_param_list(auth_param_string); end
  end
end

class Signet::AuthorizationError < ::StandardError
  def initialize(message, options = T.unsafe(nil)); end

  def request; end
  def response; end
end

class Signet::MalformedAuthorizationError < ::StandardError
end

module Signet::OAuth2
  class << self
    def generate_authorization_uri(authorization_uri, parameters = T.unsafe(nil)); end
    def generate_basic_authorization_header(client_id, client_password); end
    def generate_bearer_authorization_header(access_token, auth_params = T.unsafe(nil)); end
    def parse_authorization_header(field_value); end
    def parse_basic_credentials(credential_string); end
    def parse_bearer_credentials(credential_string); end
    def parse_credentials(body, content_type); end
    def parse_oauth_challenge(challenge_string); end
    def parse_www_authenticate_header(field_value); end
  end
end

Signet::OAuth2::AUTH_METADATA_KEY = T.let(T.unsafe(nil), Symbol)

class Signet::OAuth2::Client
  def initialize(options = T.unsafe(nil)); end

  def access_token; end
  def access_token=(new_access_token); end
  def access_type; end
  def access_type=(new_access_type); end
  def additional_parameters; end
  def additional_parameters=(new_additional_parameters); end
  def apply(a_hash, opts = T.unsafe(nil)); end
  def apply!(a_hash, opts = T.unsafe(nil)); end
  def audience; end
  def audience=(new_audience); end
  def authorization_uri(options = T.unsafe(nil)); end
  def authorization_uri=(new_authorization_uri); end
  def build_default_connection; end
  def clear_credentials!; end
  def client_id; end
  def client_id=(new_client_id); end
  def client_secret; end
  def client_secret=(new_client_secret); end
  def code; end
  def code=(new_code); end
  def coerce_uri(incoming_uri); end
  def configure_connection(options); end
  def decoded_id_token(public_key = T.unsafe(nil), options = T.unsafe(nil), &keyfinder); end
  def expired?; end
  def expires_at; end
  def expires_at=(new_expires_at); end
  def expires_in; end
  def expires_in=(new_expires_in); end
  def expires_within?(sec); end
  def expiry; end
  def expiry=(new_expiry); end
  def extension_parameters; end
  def extension_parameters=(new_extension_parameters); end
  def fetch_access_token(options = T.unsafe(nil)); end
  def fetch_access_token!(options = T.unsafe(nil)); end
  def fetch_protected_resource(options = T.unsafe(nil)); end
  def generate_access_token_request(options = T.unsafe(nil)); end
  def generate_authenticated_request(options = T.unsafe(nil)); end
  def grant_type; end
  def grant_type=(new_grant_type); end
  def id_token; end
  def id_token=(new_id_token); end
  def issued_at; end
  def issued_at=(new_issued_at); end
  def issuer; end
  def issuer=(new_issuer); end
  def notify_refresh_listeners; end
  def on_refresh(&block); end
  def orig_fetch_access_token!(options = T.unsafe(nil)); end
  def password; end
  def password=(new_password); end
  def person; end
  def person=(new_person); end
  def principal; end
  def principal=(new_person); end
  def redirect_uri; end
  def redirect_uri=(new_redirect_uri); end
  def refresh!(options = T.unsafe(nil)); end
  def refresh_token; end
  def refresh_token=(new_refresh_token); end
  def retry_with_error(max_retry_count = T.unsafe(nil)); end
  def scope; end
  def scope=(new_scope); end
  def signing_algorithm; end
  def signing_key; end
  def signing_key=(new_key); end
  def state; end
  def state=(new_state); end
  def sub; end
  def sub=(_); end
  def target_audience; end
  def target_audience=(new_target_audience); end
  def to_json(*_); end
  def to_jwt(options = T.unsafe(nil)); end
  def token_credential_uri; end
  def token_credential_uri=(new_token_credential_uri); end
  def update!(options = T.unsafe(nil)); end
  def update_token!(options = T.unsafe(nil)); end
  def updater_proc; end
  def username; end
  def username=(new_username); end

  private

  def deep_hash_normalize(old_hash); end
  def normalize_timestamp(time); end
  def recursive_hash_normalize_keys(val); end
  def set_relative_expires_at(issued_at, expires_in); end
  def uri_is_oob?(uri); end
  def uri_is_postmessage?(uri); end
end

Signet::OAuth2::Client::OOB_MODES = T.let(T.unsafe(nil), Array)

class Signet::ParseError < ::StandardError
end

class Signet::RemoteServerError < ::StandardError
end

class Signet::UnexpectedStatusError < ::StandardError
end

class Signet::UnsafeOperationError < ::StandardError
end

Signet::VERSION = T.let(T.unsafe(nil), String)
