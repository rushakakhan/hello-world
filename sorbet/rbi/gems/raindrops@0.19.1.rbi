# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `raindrops` gem.
# Please instead update this file by running `tapioca generate`.

# typed: true

class Raindrops
  def initialize(_); end

  def [](_); end
  def []=(_, _); end
  def capa; end
  def decr(*_); end
  def evaporate!; end
  def incr(*_); end
  def size; end
  def size=(_); end
  def to_ary; end

  private

  def initialize_copy(_); end
end

module Raindrops::Aggregate
end

module Raindrops::Aggregate::LastDataRecv
  def accept; end
  def accept_nonblock; end
  def count!(io); end
  def kgio_accept(*args); end
  def kgio_tryaccept(*args); end
  def raindrops_aggregate; end
  def raindrops_aggregate=(_); end

  class << self
    def cornify!; end
    def default_aggregate; end
    def default_aggregate=(agg); end
    def extended(obj); end
  end
end

class Raindrops::LastDataRecv
  def initialize(opts = T.unsafe(nil)); end

  def call(_); end
end

module Raindrops::Linux

  private

  def unix_listener_stats(paths = T.unsafe(nil)); end

  class << self
    def unix_listener_stats(paths = T.unsafe(nil)); end
  end
end

Raindrops::Linux::PROC_NET_UNIX_ARGS = T.let(T.unsafe(nil), Array)

class Raindrops::ListenStats < ::Struct
  def total; end
end

Raindrops::MAX = T.let(T.unsafe(nil), Integer)

class Raindrops::Middleware
  def initialize(app, opts = T.unsafe(nil)); end

  def app; end
  def app=(_); end
  def call(env); end
  def path; end
  def path=(_); end
  def stats; end
  def stats=(_); end
  def stats_response; end
  def tcp; end
  def tcp=(_); end
  def unix; end
  def unix=(_); end
end

class Raindrops::Middleware::Proxy
  def initialize(body, stats); end

  def close; end
  def each; end
  def method_missing(*args, &block); end
  def respond_to?(m, include_all = T.unsafe(nil)); end
  def to_path; end
end

class Raindrops::Middleware::Stats
  def initialize(*values); end

  def [](index); end
  def []=(index, value); end
  def calling; end
  def calling=(val); end
  def decr_calling; end
  def decr_writing; end
  def incr_calling; end
  def incr_writing; end
  def to_hash; end
  def writing; end
  def writing=(val); end

  private

  def initialize_copy(src); end
end

Raindrops::Middleware::Stats::MEMBERS = T.let(T.unsafe(nil), Array)

Raindrops::PAGE_SIZE = T.let(T.unsafe(nil), Integer)

Raindrops::SIZE = T.let(T.unsafe(nil), Integer)

class Raindrops::Struct
  class << self
    def new(*members); end
  end
end
